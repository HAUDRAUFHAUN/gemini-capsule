# Blogposts - Jekyll Tutorial


Moin üëã,

in diesem Blogpost soll es um den Bau einer einfachen Website mit Jekyll und das kostenlose Hosten dieser Seite mit `GitHub-Pages`.

### Vorrausetzungen

Wenn du diesem Tutorial folgen willst, dannn gehe bitte sicher, dass du schon HTML beherrschst, da ich hier nicht alles dar√ºber erkl√§ren kann. Falls du noch nicht HTML beherrschst, ist dieses Tutorial empfehlenswert: 

=> https://www.youtube.com/watch?v=qmTNnZCDJY0 Eigene Website mit HTML und CSS bauen

Zudem erf√ºlle bitte folgende Vorraussetzungen:

* habe auf deinem PC einen Codeeditor installiert, ich pers√∂nlich nutze VS Code, 
=> https://code.visualstudio.com/ hier downloadbar
* installiere 
=> https://git-scm.com/ Git
 und 
=> https://www.ruby-lang.org/de/downloads/ Ruby
 auf deinem PC üñ•
* nachdem du Ruby installiert hast, f√ºhre `gem install bundler jekyll` in deinem Terminal aus

Du erf√ºllst alle Vorrausetzungen? Dann lass uns direkt starten üöÄ

## Erstellen eines neuen Projektes

Um mit dem Programmieren zu beginnen, navigiere zun√§chst in einem Terminal in den Ordner, in dem du das Projekt erstellen m√∂chtest. Dorthin navigiert, f√ºhre in deinem Terminal zum erstellen des Projektes den Befehl

```bash
jekyll new PROJEKTNAME
```

aus. Damit wird dein Projekt erstellt.

Navigiere nun in den Projekordner mit

```bash
cd PROJEKTNAME
```

und f√ºhre den Befehl

```bash
bundle exec jekyll serve
```

aus. Wenn du nun in deinem Webbrowser 
=> http://localhost:4000 localhost:4000
eingibst, kannst du die Standardseite, die von Jekyll automatisch generiert wurde, sehen.

## Eigene Inhalte erstellen 

Nun wollen wir aber nicht die Jekyll-Defaultwebsite, sondern eine eigene Website entwickeln. Dazu stoppen wir zun√§chst den Server und l√∂schen dann alles bis auf die Dateien `\_config.yml`, `Gemfile`, `Gemfile.lock`, `.gitignore` und `404.html`.

Daraufhin ersetzen wir den Inhalt der Datei `\_config.yml` durch folgendes:

```yml
title: Your awesome title
baseurl: ""
url: ""

plugins:
  - jekyll-feed
```

Dann erstellen wir eine Datei mit dem Namen `index.html`, die folgenderma√üen aussieht:

```html
<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Hallo Jekyll</title>
  </head>
  <body>
    <h1>Hallo Welt</h1>
  </body>
</html>
```


Wenn wir nun mit `bundle exec jekyll serve` die Seite neu starten, bekommen wir folgendes zu sehen:

<img alt="Result Screenshot no. 1" src="/images/jekyll-tutorial/screenshot1.jpg" />

Das vorher programmierte `Hallo Welt` erscheint! Wenn wir das hier geschafft haben k√∂nnen wir die Seite nach unseren W√ºnschen und Bed√ºrfnissen mit `HTML` ; `CSS` und `JavaScript` gestalten.

## Layouts und Includes in Jekyll üîÉ
Bisher haben wir ein einfaches `Hallo Welt` auf der Website erscheinen lassen. Dies sah 1. nicht sch√∂n aus und zweitens ist eine richtige Website ja auch etwas anderes...

Meistens sind Websites ja so aufgebaut:

- oben: Navigationsleiste
- mitte: Inhalt
- unten: Fu√üzeile/Footer mit &copy; und Link zu Impressum

Wenn unsere Website mehrere Seiten beinhaltet, dann m√ºssten wir rein theoretisch die Navigation und den Footer in jeder `HTML` Datei neu schreiben, was nat√ºrlich umst√§ndlich ist und bei √Ñnderungen and diesen Komponenten schnell un√ºbersichtlich wird, da wir die Komponente in jeder Datei dann √§ndern m√ºssen.
Doch Jekyll nimmt uns diese Arbeit mit den sogenannten `Includes` und `Layouts` ab:

### Includes

Statt in jeder Datei z.B. deie Naviation neu zu programmieren, k√∂nnen wir die Navbar in einer Datei designen und m√ºsssen diese dann lediglich in den anderen `HTML` Dateien importieren. Der Vorteil liegt auf der Hand: Wir √§ndern die auf jeder Seite vorhandene Komponente wie die Navigationsbar nur in einer Datei und m√ºssen nicht in jeder Datei diese neu programmieren. Und so gehen wir dabei vor:

1. Wir erstellen einen Ordner mit dem Namen `\_includes`. Dies ist wichtig, da Jekyll nur aus einem Ordner mit exakt diesem Namen importieren kann
2. Erstelle eine Datei mit dem Namen `\_navbar.html` in dem in 1. erstellten Ordner, hier werden wir die Navigationsleiste unserer Seite erstellen.
3. Bearbeite nun deine `index.html` so, dass sie folgenderma√üen aussieht:

```html
---
permalink: /
---

<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css"
    />
    <title>Your awesome title</title>
  </head>
  <body>
    <section class="section" style="margin-top: 0.2rem; margin-bottom: 1.5rem;">
      <div class="container"></div>
    </section>
    <br />
    <br />
  </body>
</html>
```

Damit importierst du 
=> https://bulma.io/" Bulma,
ein `CSS` Framework, das ich hier nutze, da es vorgefertigte Komponenten wie Navbars bereitstellt (das macht die Arbeit am Anfang deutlich leichter). Zudem definiertst du mit `permalink: /` den Link, mit dem `index.html` aufgerufen wird.

4. Nun programmieren wir die Navbar: dazu begeben wir uns zur√ºck in die Datei `\_navbar.html` und programmieren folgendes als Navbar:

```html
<nav class="navbar is-light" role="navigation" aria-label="main navigation">
    <div class="navbar-brand">
      <a href="/" class="navbar-item">
      Titel
      </a>

      <a
        role="button"
        class="navbar-burger burger"
        aria-label="menu"
        aria-expanded="false"
        data-target="navbarBasicExample"
      >
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
      </a>
    </div>

    <div id="navbarBasicExample" class="navbar-menu">
      <div class="navbar-start">
        <a class="navbar-item">
          Home
        </a>
        </div>
        <div class="navbar-end">
          <a class="navbar-item" href="/impressum/">
            Impressum
          </a>
        </div>
      </div>
    </div>
  </nav>
```

Du kannst auch deine eigene Navbar entwickeln, die (in englisch verfasste) Dokumentation dazu findest du 
=> https://bulma.io/documentation/components/navbar/ hier.

5. Nun wollen wir die Navbar in unser `index.html` Datei importieren: Dazu √∂ffnen wir `index.html` und f√ºgen √ºber

```html
<section class="section"></section>
```

die Zeile

```css
{% include _navbar.html %}
```

hinzu, die dann die Navbar importiert. Wenn wir uns nun im Browser unsere Seite neu laden k√∂nnen wir in etwa folgendes sehen:

<img alt="Result Screenshot no. 2" src="/images/jekyll-tutorial/screenshot2.jpg" />

Zu sehen ist die von uns programmierte Navigationsleisteü•≥

Nun kommen wir zur ersten Aufgabe f√ºr dich:

Programmiere f√ºr die Website einen Footer(= Fu√üzeile) und importiere diesen mithilfe von `Includes` in die Datei `index.html`. Die Footer Komponente von `Bulma` kannst du 
=> https://bulma.io/documentation/layout/footer/ hier
finden. Du kannst aber gerne auch einen eigenen Footer entwickeln.

### Layouts
`Layouts` sind gewisserma√üen der Bruder der `Includes`, sie sind n√§mlich nicht nur wie die `Includes` eine Blaupause f√ºr eine Komponente der Seite, sondern eine Blaupause f√ºr die gesamte Seite (das Layout). Das tolle an `Layouts` ist, dass diese nicht nur f√ºr `HTML` Dateien funktionieren, sondern auch f√ºr `Markdown` verarbeiten k√∂nnen.

Um eigene `Layouts` zu erstellen, m√ºssen wir zun√§chst neben `\_includes` einen Ordner mit dem Namen `\_layouts` erstellen; in diesem Ordner werden wir unsere Layouts speichern.

In dem gerade erstellten Ordner erstellen wir nun unser erstes Layout, indem wir eine Datei mit dem Namen `default.html` erstellen.
Danach d√ºrfte die Ordnerstruktur unseres Projektes so aussehen:

<img alt="Ordnerstruktur des Projektes" src="/images/jekyll-tutorial/screenshot3.jpg" />

Zun√§chst kopieren wir den gesamten Code unserer `index.html` in `default.html`.

Daraufhin bearbeiten wir die Datei `default.html` so, dass sie folgenderma√üen aussieht:

```html
<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css"
    />
    <title>Your awesome title</title>
  </head>
  <body>
    {% include _navbar.html %}
    <section class="section" style="margin-top: 0.2rem; margin-bottom: 1.5rem;">
      <div class="container content">
        <h1 class="title">{{page.title}}</h1>
        <br />
        {{content}}
      </div>
    </section>
    <br />
    <br />
  </body>
</html>
```

Nun bearbeiten wir die Datei index.html folgenderma√üen:

```html
---
permalink: /
layout: default
title: Home
---

<div class="content">Hier steht der Inhalt der Indexseite...</div>
```

Wenn wir uns nun unsere Ausgabe im Browser anschauen, k√∂nnen wir folgendes sehen:

<img alt="Result Screenshot no. 4" src="/images/jekyll-tutorial/screenshot4.jpg" />

Doch was genau haben wir hier gemacht?

Wir haben zun√§chst in `default.html` ein Layout entwickelt, dass

1. Die Navbar per `include` importiert (wenn du einen eigenen Footer entwickelt hast, solltest du diesen nat√ºrlich auch includen üòâ)
2. einen Ort definiert wo der Parameter `title`, also der Titel der jeweiligen Seite angezeigt wird; in diesem Falle ist dies logischerweise ein `h1` Tag
3. haben wir die Stelle definiert, an der der Inhalt (==`content`) unserer Seite steht
4. haben wir in dem Header von `index.html` den `title` sowie das `layout` definiert
5. haben wir in der `index.html` in dem `<div>` mit der Klasse `content` (die wir im Layout definiert haben) unsere Inhalte erstellt.

Aufgabe: Erstelle nun das Impressum

Tips:

* Da wir in der Navbar schon als Link f√ºr das Impressum /impressum/ angeben haben, ist es naheliegend, dies auch als Permalink zu nutzen
* erstelle deine `HTML` Datei f√ºr das Impressum im gleichen Ordner üìÅ wie `index.html`

##Kostenloses Hosting mit GitHub-Pagesüî•</h2>
### üöß Wichtig! Lese diesen Abschnitt erst ganz genau durch, bevor du den beschriebenen Vorgang durchf√ºhrst!üöß

Wenn du nun (hoffentlich mit der Hilfe dieses TutorialsüôÉ) eine eigene Website mit `Jekyll` entwickelt hast und diese ver√∂ffentlichen m√∂chtest, bietet sich `GitHub-Pages` als besonders elegante und kostenloseüíµ L√∂sung an. Eigentlich ist `Github` eine Website zum Teilen von Open-Source Code, allerdings gibt es inzwischen tausende Features mehr. Eines dieser vielen Features ist das kostenlose Hosten von Jekyll-Webpages. Die einzige Vorraussetzung ist: besitze einen kostenlosen 
=> https://github.com/ GitHub-Account. 
Falls du noch keinen GitHub Account hast, aber dir einen speziell f√ºr `GitHub-Pages` erstellen willst, folgender Hinweis: Die Website bekommt standardm√§√üig immer folgende URL: 
> BENUTZERNAME.github.io 
wobei `BENUTZERNAME` dein GitHub Username ist. Man kann das zwar auch auf andere Domains "umprogrammieren", dies verursacht allerdings Extraaufwand und kann auch Kosten hervorrufen (vor allem bei dem eigenen Domainnamen, denn der muss in der Regel gekauf werden). Aus diesen Gr√ºnden sei geraten, sich einen guten GitHub-Username auszusuchen, da dieser Bestandteil der URL ist!

Hast du deinen GitHub Account erstellt, kannst du auch schon direkt loslegen:

Erstelle zun√§chst unter 
=> https://github.com/new https://github.com/new 
ein neues GitHub-Repository mit dem Namen `BENUTZERNAME.github.io`, wobei `BENUTZERNAME` dein exakter GitHub Benutzername sein muss!

W√§hle dann folgende Optionen aus:

<img alt="Creating a new GitHub repository" src="/images/jekyll-tutorial/screenshot5.jpg" />

Wenn du fertig bist, klicke auf `Create Repository` und erstelle damit das Repository. Nun solltest du in etwa folgendes zu Gesicht bekommen:

<img alt="GitHub Repository" src="/images/jekyll-tutorial/screenshot6.jpg" />

Jetzt musst du nur noch auf `uploading an existing file` klicken. Dort gelangst du dann zu einer √úbersicht, wo du deine Projektdateien uploaden kannst. Diese werden dann von `GitHub Pages` automatisch zum hosten genutzt. Du kannst auch in Zukunft die Dateien auf GitHub ver√§ndern, l√∂schen und neue Dateien erstellen. All dieser Vorg√§nge werden von `GitHub Pages` automatisch verarbeitet.

=> / Home